<?xml version="1.0"?>
<doc>
<assembly>
<name>
Mqtt客户端
</name>
</assembly>
<members>
<member name="F:Mqtt客户端.MqttClient.PORT_DEFAULT">
	<summary>MQTT默认端口号</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_CONNCET">
	<summary>客户端请求连接服务器(客户端到服务端)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_CONNACK">
	<summary>连接确认(服务端到客户端)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_PUBLISH">
	<summary>发布消息(两个方向都允许)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_PUBACK">
	<summary>发布确认，响应QoS等级为1的PUBLISH包(两个方向都允许)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_PUBREC">
	<summary>发布接收（有保证的交付第1部分）(两个方向都允许)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_PUBREL">
	<summary>发布释放（有保证的交付第2部分）(两个方向都允许)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_PUBCOMP">
	<summary>发布完成（有保证的交付第3部分）(两个方向都允许)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_SUBSCRIBE">
	<summary>客户端订阅请求(客户端到服务端)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_SUBACK">
	<summary>订阅确认(服务端到客户端)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_UNSUBSCRIBE">
	<summary>客户端取消订阅请求(客户端到服务端)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_UNSUBACK">
	<summary>取消订阅确认(服务端到客户端)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_PINGREQ">
	<summary>心跳请求(客户端到服务端)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_PINGRESP">
	<summary>心跳回复(服务端到客户端)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_DISCONNECT">
	<summary>断开连接(两个方向都允许)</summary>
</member><member name="F:Mqtt客户端.MqttClient.ControlType.CONTROL_TYPE_AUTH">
	<summary>认证信息交换(两个方向都允许)</summary>
</member><member name="T:Mqtt客户端.MqttClient.ControlType">
	<summary>
 MQTT控制报文类型枚举
 </summary>
	<remarks></remarks>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_CONNECTION_ACCEPTED">
	<summary>已接受连接 </summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_UNACCEPTABLE_PROTOCOL_VER">
	<summary>服务器不支持客户端请求的MQTT协议版本</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_ID_ENTIFIER_REJECTED">
	<summary>客户端标识符是正确的UTF-8，但服务器不允许</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_SERVER_UNAVAILABLE">
	<summary>已建立网络连接，但MQTT服务不可用</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_BAD_USER_OR_PWD">
	<summary>用户名或密码中的数据格式不正确</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_NOT_AUTBORIZED">
	<summary>客户端未被授权连接</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_UNSPECIFIED_ERROR">
	<summary>服务端不愿透露的错误，或者没有适用的原因码</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_INVALID_MESSAGE">
	<summary>CONNECT报文内容不能被正确的解析</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_PROTOCOL_ERROR">
	<summary>CONNECT报文内容不符合本规范</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_VALIDITY_NOT_ACCEPTED">
	<summary>CONNECT有效，但不被服务端所接受</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_PROTOCOL_VER_NOT_SUPPORTED">
	<summary>服务端不支持客户端所请求的MQTT协议版本</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_INVALID_IDENTIFIER">
	<summary>客户标识符有效，但未被服务端所接受</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_USER_OR_PWD_ERROR">
	<summary>客户端指定的用户名密码未被服务端所接受</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_UNAUTHORIZED">
	<summary>客户端未被授权连接</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_SERVER_NOT_AVAILABLE">
	<summary>MQTT服务端不可用</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_SERVER_BUSY">
	<summary>服务端正忙，请重试</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_PROHIBIT">
	<summary>客户端被禁止，请联系服务端管理员</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_INVALID_AUTHENTICATION_METHOD">
	<summary>认证方法未被支持，或者不匹配当前使用的认证方法</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_INVALID_SUBJECT_NAME">
	<summary>遗嘱主题格式正确，但未被服务端所接受</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_MESSAGE_TOO_LONG">
	<summary>CONNECT报文超过最大允许长度</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_QUOTA_EXCEEDED">
	<summary>已超出实现限制或管理限制</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_INVALID_LOAD_FORMAT">
	<summary>遗嘱载荷数据与载荷格式指示符不匹配</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_RESERVATION_NOT_SUPPORTED">
	<summary>遗嘱保留标志被设置为1，但服务端不支持保留消息</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_UNSUPPORTED_QOS_LEVEL">
	<summary>服务端不支持遗嘱中设置的QoS等级</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_TEMP_USE_OTHER_SERVER">
	<summary>客户端应该临时使用其他服务端</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_PERMANENT_USE_OTHER_SERVER">
	<summary>客户端应该永久使用其他服务端</summary>
</member><member name="F:Mqtt客户端.MqttClient.ReasonCode.REASON_CODE_EXCEEDING_CONNECT_SPEED_LIMIT">
	<summary>超出了所能接受的连接速率限制</summary>
</member><member name="T:Mqtt客户端.MqttClient.ReasonCode">
	<summary>
 连接原因码
 </summary>
	<remarks></remarks>
</member><member name="F:Mqtt客户端.MqttClient.tcpSocket">
	<summary>TCP客户端套接字 </summary>
</member><member name="F:Mqtt客户端.MqttClient.timeCount">
	<summary>用于心跳检测定时计数器</summary>
</member><member name="F:Mqtt客户端.MqttClient.isPingResp">
	<summary>发送心跳包后服务器应答标志</summary>
</member><member name="F:Mqtt客户端.MqttClient.keepNotRespCount">
	<summary>存放心跳包发送无应答次数（3次无应答视为离线）</summary>
</member><member name="F:Mqtt客户端.MqttClient.isConnected">
	<summary>定义标识符，用以表示TCP连接是否建立 </summary>
</member><member name="F:Mqtt客户端.MqttClient.isMqttDisconnect">
	<summary>标志是否执行了断开MQTT连接方法</summary>&gt;

</member><member name="F:Mqtt客户端.MqttClient.mConnectOptions">
	<summary>MQTT连接选项（存放连接必须的一些参数）</summary>
</member><member name="F:Mqtt客户端.MqttClient.mClientId">
	<summary>存放客户端唯一标识ID</summary>
</member><member name="F:Mqtt客户端.MqttClient.readThread">
	<summary>接收信息线程</summary>
</member><member name="F:Mqtt客户端.MqttClient.mForm">
	<summary>装载该类的窗体类（用于实现线程内托管操作主线程UI）</summary>
</member><member name="F:Mqtt客户端.MqttClient.timerKeepLive">
	<summary>执行心跳包发送用定时器</summary>
</member><member name="T:Mqtt客户端.MqttClient.PublishReceive">
	<summary>
 发布接收
 </summary>
	<param name="topic">主题名称</param>
	<param name="message">发布的消息</param>
	<remarks></remarks>
</member><member name="T:Mqtt客户端.MqttClient.ErrorReceive">
	<summary>
 接收错误
 </summary>
	<param name="controlType">触发错误的控制类型</param>
	<param name="errCode">错误代码</param>
	<param name="errMessage">错误描述消息</param>
	<remarks></remarks>
</member><member name="T:Mqtt客户端.MqttClient.ConnectSuccess">
	<summary>
 连接成功
 </summary>
	<param name="sessionPresent">
 如果服务端接受了一个CleanSession设置为1的连接，服务端必须将CONNACK包中的Session Present设置为0，并且CONNACK包的返回码也设置为0。
 如果服务端接受了一个CleanSession设置为0的连接，Session Present的值取决于服务端是否已经存储了客户端Id对应的绘画状态。
 如果服务端已经存储了会话状态，CONNACK包中的Session Present必须设置为1。
 如果服务端没有存储会话状态，CONNACK包的Session Present必须设置为0。
 另外CONNACK包中的返回码必须设为0。
 </param>
	<remarks></remarks>
</member><member name="T:Mqtt客户端.MqttClient.PublishProcess">
	<summary>
 发布进度
 </summary>
	<param name="controlType">控制类型</param>
	<param name="Identifier">识别id</param>
	<remarks></remarks>
</member><member name="T:Mqtt客户端.MqttClient.SubscribeState">
	<summary>
 主题订阅主题主题
 </summary>
	<param name="isSubscribe">是订阅主题。true 是订阅主题，false 取消主题订阅</param>
	<param name="Identifier">唯一标识id</param>
	<remarks></remarks>
</member><member name="T:Mqtt客户端.MqttClient.DisConnect">
	<summary>
 断开连接
 </summary>
	<param name="onlyMqttConnect">true 是MQTT连接断开；false TCP连接断开</param>
	<remarks></remarks>
</member><member name="E:Mqtt客户端.MqttClient.publishReceiveArrival">
	<summary>
 当新数据到达时出现
 </summary>
	<remarks>当新数据到达时出现</remarks>
</member><member name="E:Mqtt客户端.MqttClient.errorReceiveArrival">
	<summary>
 当接收到错误消息时
 </summary>
	<remarks>当新错误数据到达时出现</remarks>
</member><member name="E:Mqtt客户端.MqttClient.connectMqttSuccess">
	<summary>
 当与MQTT服务端连接成功
 </summary>
	<remarks>MQTT服务端应答确认连接时</remarks>
</member><member name="E:Mqtt客户端.MqttClient.publishTopicProcess">
	<summary>
 发布主题消息过程
 </summary>
	<remarks>发布完成或发布中</remarks>
</member><member name="E:Mqtt客户端.MqttClient.subscribeTopicState">
	<summary>
 完成主题订阅或取消订阅
 </summary>
	<remarks>收到订阅完成或退定完成时</remarks>
</member><member name="E:Mqtt客户端.MqttClient.disConnectSuccess">
	<summary>
 断开连接
 </summary>
	<remarks>收到MQTT断开消息或TCP断开时</remarks>
</member><member name="M:Mqtt客户端.MqttClient.#ctor(System.Windows.Forms.Form)">
	<summary>
 构造函数
 </summary>
	<param name="form">加载这个类的窗体类</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.#ctor(System.Windows.Forms.Form,Mqtt客户端.MqttConnectOptions)">
	<summary>
 构造函数
 </summary>
	<param name="form">加载这个类的窗体类</param>
	<param name="onnectOptions">连接选项</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.timerKeepLive_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
	<summary>
 定时器触发事件
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.setConnectOptions(Mqtt客户端.MqttConnectOptions)">
	<summary>
 设置连接选项
 </summary>
	<param name="connectOptions"></param>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttClient.connectOptions">
	<summary>
 连接选项
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.mqttConnect(System.String,System.String)">
	<summary>
 连接MQTT服务器（默认端口1883）
 </summary>
	<param name="addr">服务器IP地址</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.mqttConnect(System.String,System.Int32,System.String)">
	<summary>
 连接到MQTT服务器
 </summary>
	<param name="addr">服务器IP地址</param>
	<param name="port">tcp端口号</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.mqttConnect(System.String,System.String,Mqtt客户端.MqttConnectOptions)">
	<summary>
 连接到MQTT服务器（默认端口1883）
 </summary>
	<param name="addr">服务器IP地址</param>
	<param name="options">连接选项</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.mqttConnect(System.String,System.Int32,System.String,Mqtt客户端.MqttConnectOptions)">
	<summary>
 连接到MQTT服务器
 </summary>
	<param name="addr">服务器IP地址</param>
	<param name="port">tcp端口号</param>
	<param name="options">连接选项</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.mqttDisconnect(System.Byte)">
	<summary>
 断开MQTT连接
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.subscribe(System.String,Mqtt客户端.MqttClient.MqttQoS)">
	<summary>
 订阅主题
 </summary>
	<param name="topic">主题名称</param>
	<param name="QoS">服务端发送给客户端应用消息的最大等级</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.subscribe(System.String,Mqtt客户端.MqttSubscriptionOptions)">
	<summary>
 订阅主题
 </summary>
	<param name="topic">主题名称</param>
	<param name="subscribeOptions">订阅选项</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.subscribe(System.String,Mqtt客户端.MqttClient.MqttQoS,System.UInt16,Mqtt客户端.MqttProperties)">
	<summary>
 订阅主题
 </summary>
	<param name="topic">主题名称</param>
	<param name="QoS">服务端发送给客户端应用消息的最大等级</param>
	<param name="packetIdentifier">包唯一id，默认使用1-65535之间的随机整数</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.subscribe(System.String[],Mqtt客户端.MqttClient.MqttQoS[],Mqtt客户端.MqttProperties)">
	<summary>
 订阅主题
 </summary>
	<param name="topics">主题名称数组</param>
	<param name="QoS">服务端发送给客户端应用消息的最大等级数组</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.subscribe(System.String[],Mqtt客户端.MqttClient.MqttQoS[],System.UInt16,Mqtt客户端.MqttProperties)">
	<summary>
 订阅主题
 </summary>
	<param name="topics">主题名称数组</param>
	<param name="QoS">服务端发送给客户端应用消息的最大等级数组</param>
	<param name="packetIdentifier">包唯一id，默认使用1-65535之间的随机整数</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.subscribe(System.String[],Mqtt客户端.MqttSubscriptionOptions[],System.UInt16,Mqtt客户端.MqttProperties)">
	<summary>
 订阅主题
 </summary>
	<param name="topics">主题名称数组</param>
	<param name="subscribeOptions">订阅选项,在该选项中除qos选项在私有版本有效外，其余选项仅5.0及以上有效</param>
	<param name="packetIdentifier">包唯一标识符</param>
	<param name="properties">属性</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.unSubscribe(System.String)">
	<summary>
 退订主题
 </summary>
	<param name="topicName">主题名</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.unSubscribe(System.String,System.UInt16)">
	<summary>
 退订主题
 </summary>
	<param name="topicName">主题名</param>
	<param name="packetIdentifier">包唯一id，默认使用1-65535之间的随机整数</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.unSubscribe(System.String[])">
	<summary>
 退订主题
 </summary>
	<param name="topicNames">主题列表</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.unSubscribe(System.String[],System.UInt16)">
	<summary>
 退订主题
 </summary>
	<param name="topicNames">主题列表</param>
	<param name="packetIdentifier">包唯一id，默认使用1-65535之间的随机整数</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.publish(System.String,System.String,System.Boolean,Mqtt客户端.MqttClient.MqttQoS,System.Boolean,Mqtt客户端.MqttProperties)">
	<summary>
 发布主题消息
 </summary>
	<param name="topicName">话题名称</param>
	<param name="payload">发布的消息内容</param>
	<param name="DUP">重复传送</param>
	<param name="QoS">服务质量。为0 时接收端无需应答</param>
	<param name="retain">
 存储话题标志
 如果RETAIN标识被设置为1，在一个从客户端发送到服务端的PUBLISH包中，服务端必须存储应用消息和QoS，以便可以发送给之后订阅这个话题的订阅者[MQTT-3.3.1-5]。
 当一个新的订阅发生，最后一个保留的消息，如果有的话，而且匹配订阅话题，必须发送给订阅者[MQTT-3.3.1-6]。
 如果服务端收到一个QoS 0并且RETAIN标识设置为1的消息，它必须清空之前为这个话题保存的所有消息。
 服务端应该存储新的QoS 0的消息作为这个话题新的保留消息，但是也可以选择在任何时候清空保留消息——如果这样做了，那这个话题就没有保留消息了[MQTT-3.3.1-7]。
 <param name="properties">属性（适用于MQTT 5.0及以上版本）</param>
	</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.publish(System.String,System.Byte[],System.Boolean,Mqtt客户端.MqttClient.MqttQoS,System.Boolean,Mqtt客户端.MqttProperties)">
	<summary>
 发布主题消息
 </summary>
	<param name="topicName">话题名称</param>
	<param name="payload">发布的消息内容</param>
	<param name="DUP">重复传送</param>
	<param name="QoS">服务质量。为0 时接收端无需应答</param>
	<param name="retain">
 存储话题标志
 如果RETAIN标识被设置为1，在一个从客户端发送到服务端的PUBLISH包中，服务端必须存储应用消息和QoS，以便可以发送给之后订阅这个话题的订阅者[MQTT-3.3.1-5]。
 当一个新的订阅发生，最后一个保留的消息，如果有的话，而且匹配订阅话题，必须发送给订阅者[MQTT-3.3.1-6]。
 如果服务端收到一个QoS 0并且RETAIN标识设置为1的消息，它必须清空之前为这个话题保存的所有消息。
 服务端应该存储新的QoS 0的消息作为这个话题新的保留消息，但是也可以选择在任何时候清空保留消息——如果这样做了，那这个话题就没有保留消息了[MQTT-3.3.1-7]。
 <param name="properties">属性（适用于MQTT 5.0及以上版本）</param>
	</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.publish(System.String,System.Byte[],System.Boolean,Mqtt客户端.MqttClient.MqttQoS,System.Boolean,System.UInt16,Mqtt客户端.MqttProperties)">
	<summary>
 发布主题消息
 </summary>
	<param name="topicName">话题名称</param>
	<param name="payload">有效载荷</param>
	<param name="DUP">重复传送标志</param>
	<param name="QoS">服务质量。为0 时接收端无需应答</param>
	<param name="retain">
 存储话题标志
 如果RETAIN标识被设置为1，在一个从客户端发送到服务端的PUBLISH包中，服务端必须存储应用消息和QoS，以便可以发送给之后订阅这个话题的订阅者[MQTT-3.3.1-5]。
 当一个新的订阅发生，最后一个保留的消息，如果有的话，而且匹配订阅话题，必须发送给订阅者[MQTT-3.3.1-6]。
 如果服务端收到一个QoS 0并且RETAIN标识设置为1的消息，它必须清空之前为这个话题保存的所有消息。
 服务端应该存储新的QoS 0的消息作为这个话题新的保留消息，但是也可以选择在任何时候清空保留消息——如果这样做了，那这个话题就没有保留消息了[MQTT-3.3.1-7]。
 </param>
	<param name="packetIdentifier">包唯一id，仅QoS》0时需要，可以不设置，不设置默认产生1-65535的随机ID</param>
	<param name="properties">属性（适用于MQTT 5.0及以上版本）</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.publish(System.String,System.String,Mqtt客户端.MqttClient.MqttQoS,System.Boolean,Mqtt客户端.MqttProperties)">
	<summary>
 发布主题消息
 </summary>
	<param name="topicName">传递给的主题名称，例如“finance/stock/ibm”</param>
	<param name="payload">要用作有效负载</param>
	<param name="QoS">传递消息的服务质量。有效值为0、1或2</param>
	<param name="retain"> 服务器是否应保留此消息</param>
	<param name="properties">属性（适用于MQTT 5.0及以上版本）</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.publish(System.String,System.Byte[],Mqtt客户端.MqttClient.MqttQoS,System.Boolean,Mqtt客户端.MqttProperties)">
	<summary>
 发布主题消息
 </summary>
	<param name="topicName">传递给的主题名称，例如“finance/stock/ibm”</param>
	<param name="payload">要用作有效负载</param>
	<param name="QoS">传递消息的服务质量。有效值为0、1或2</param>
	<param name="retain"> 服务器是否应保留此消息</param>
	<param name="properties">属性（适用于MQTT 5.0及以上版本）</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.publish(System.String,Mqtt客户端.MqttMessage)">
	<summary>
 发布主题消息
 </summary>
	<param name="topicName">传递给的主题名称，例如“finance/stock/ibm”</param>
	<param name="message">要传递的消息</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.getCpuGuid">
	<summary>
 获取CPU ID并转位guid字符串
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.IByte(System.Int16)">
	<summary>
 低字节在前，高字节在后
 </summary>
	<param name="s"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.IByte(System.UInt16)">
	<summary>
 低字节在前，高字节在后
 </summary>
	<param name="s"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.IByte(System.UInt32)">
	<summary>
 低字节在前，高字节在后
 </summary>
	<param name="s"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.getBitVal(System.Int64,System.Byte)">
	<summary>
 获取整数的某一位值
 </summary>
	<param name="value">需要取位的整数</param>
	<param name="bit">要取位的位置索引。从右至左0-7</param>
	<returns>返回美国位的值0或1</returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.pubrecNext(Mqtt客户端.MqttClient.ControlType,System.Byte[])">
	<summary>
 继续发布主题（用于响应 QoS 2的PUBLISH包、PUBREC包、PUBREL包及QoS 1的PUBLISH包）
 </summary>
	<param name="packetType">
 继续发布主题的包类型。
 CONTROL_TYPE_PUBREC 响应QoS 2的PUBLISH包。这是QoS 2协议交换的第二个包；
 CONTROL_TYPE_PUBREL 响应PUBREC包。是QoS 2协议交换的第三部分；
 CONTROL_TYPE_PUBCOMP 响应PUBREL包。这是QoS 2协议交换的第四个也是最后一个包；
 CONTROL_TYPE_PUBACK 发布确认。响应QoS等级为1的PUBLISH包
 </param>
	<param name="identifier">需要确认的包唯一标识</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.mqttPingReq">
	<summary>
 心跳包发送
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.reciveMsgCallback">
	<summary>
 接收线程回调
 </summary>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.connectMqtt">
	<summary>
 发送MQTT连接请求包
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.disConnectSock">
	<summary>
 断开服务端连接
 </summary>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.getFixedHead(Mqtt客户端.MqttClient.ControlType,System.Int32,System.Boolean,Mqtt客户端.MqttClient.MqttQoS,System.Boolean)">
	<summary>
 固定头
 </summary>
	<param name="msgType">消息类型（1-15）</param>
	<param name="remainingLength">
 剩余长度，最大268435455。是一个变长字节整数，用来表示当前控制报文剩余部分的字节数，包括可变报头和负载的数据。
 剩余长度不包括用于编码剩余长度字段本身的字节数。MQTT控制报文总长度等于固定报头的长度加上剩余长度。
 </param>
	<param name="DUP">重复传送</param>
	<param name="QoS">服务质量</param>
	<param name="retain">
 该标志位只用于 PUBLISH 消息。当一个客户端发送一条 PUBLISH 消息给服务器，假设该消息所属的主题（topic）
 为topicA，如果该标志位被置位（1），服务器在将该条消息发布给当前的所有topicA的订阅者之后，还应当保持这条消息。
 </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.getVariableHeaderConncet(System.Boolean,System.Boolean,Mqtt客户端.MqttClient.MqttQoS,System.Boolean,System.Boolean,System.Boolean,System.Int16,System.Byte)">
	<summary>
 可变头数据（仅用于连接）
 </summary>
	<param name="cleanSessionFlag">为true的CONNECT报文，客户端和服务端必须丢弃任何已存在的会话，并开始一个新的会话</param>
	<param name="willFlag">如果遗嘱标志（Will Flag）被设置为true，表示遗嘱消息必须已存储在服务端与此客户标识符相关的会话中</param>
	<param name="willQoS">
 发布遗嘱消息（Will Message）时的服务质量（QoS）。
 如果willFlag设置为false，willQoS必须也设置为0（0x00）[MQTT-3.1.2-13]
 如果willFlag设置为true，willQoS可以被设置为0（0x00），1（0x01）或2（0x02）[MQTT-3.1.2-13]
 </param>
	<param name="willRetain">
 指定遗嘱消息（Will Message）在发布时是否会被保留。
 如果willFlag标志被设置为false，willRetainFlag标志也必须设置为false [MQTT-3.1.2-13]。
 如果willFlag标志被设置为true时，如果willRetainFlag被设置为false，则服务端必须将遗嘱消息当做非保留消息发布 [MQTT-3.1.2-14]。
 如果willRetainFlag被设置为true，则服务端必须将遗嘱消息当做保留消息发布 [MQTT-3.1.2-15]。
 </param>
	<param name="userFlag">
 3.1.2.8 用户名标志。
 如果用户名标志（User Name Flag）被设置为false，有效载荷中不能包含用户名字段 [MQTT-3.1.2-16]。如果用户名标志被设置为true，有效载荷中必须包含用户名字段 [MQTT-3.1.2-17]。
 </param>
	<param name="pwdFlag">
 密码标志。
 如果密码标志（Password Flag）被设置为false，有效载荷中不能包含密码字段 [MQTT-3.1.2-18]。如果密码标志被设置为true，有效载荷中必须包含密码字段 [MQTT-3.1.2-19]。
 </param>
	<param name="keepLive">保活计时时间（秒）</param>
	<param name="ver">MQTT协议版本</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.getVariableHeaderConncet(System.Boolean,System.Boolean,Mqtt客户端.MqttClient.MqttQoS,System.Boolean,System.Boolean,System.Boolean,System.Int16,Mqtt客户端.MqttProperties,System.Byte)">
	<summary>
 可变头数据（仅用于连接）
 </summary>
	<param name="cleanSessionFlag"></param>
	<param name="willFlag"></param>
	<param name="willQoS"></param>
	<param name="willRetain"></param>
	<param name="userFlag"></param>
	<param name="pwdFlag"></param>
	<param name="keepLive"></param>
	<param name="properties"></param>
	<param name="ver">MQTT版本</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.getProperiesHeaderConnect(Mqtt客户端.MqttProperties)">
	<summary>
 获取连接可变头属性数据（适用于MQTT 5.0及以上）
 </summary>
	<param name="properties"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.VariableLengthByte(System.UInt32)">
	<summary>
 整数转边长字节数组
 </summary>
	<param name="variableInteger"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.getPayloadConnect(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 MQTT连接的有效载荷
 </summary>
	<param name="clientId">客户端ID字符串</param>
	<param name="willTopic">遗属主题（如果Will Flag设置为1，Will Topic是载荷的下一个字段。）</param>
	<param name="willMessage">遗属消息（如果Will Flag设置为1，Will Message是载荷的iayige字段。）</param>
	<param name="userName">用户名（如果User Name Flag设置为1，这将是载荷的下一个字段。）</param>
	<param name="pwd">密码（如果Password Flag设置为1，这将是载荷的下一个字段。）</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.getPayloadConnect(System.String,System.String,System.Byte[],System.String,System.String)">
	<summary>
 MQTT连接的有效载荷
 </summary>
	<param name="clientId">客户端ID字符串</param>
	<param name="willTopic">遗属主题（如果Will Flag设置为1，Will Topic是载荷的下一个字段。）</param>
	<param name="willMessage">遗属消息（如果Will Flag设置为1，Will Message是载荷的iayige字段。）</param>
	<param name="userName">用户名（如果User Name Flag设置为1，这将是载荷的下一个字段。）</param>
	<param name="pwd">密码（如果Password Flag设置为1，这将是载荷的下一个字段。）</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.getConnectFlags(System.Boolean,System.Boolean,Mqtt客户端.MqttClient.MqttQoS,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 连接标志
 </summary>
	<param name="cleanSessionFlag">为true的CONNECT报文，客户端和服务端必须丢弃任何已存在的会话，并开始一个新的会话</param>
	<param name="willFlag">如果遗嘱标志（Will Flag）被设置为true，表示遗嘱消息必须已存储在服务端与此客户标识符相关的会话中</param>
	<param name="willQoS">
 发布遗嘱消息（Will Message）时的服务质量（QoS）。
 如果willFlag设置为false，willQoS必须也设置为0（0x00）[MQTT-3.1.2-13]
 如果willFlag设置为true，willQoS可以被设置为0（0x00），1（0x01）或2（0x02）[MQTT-3.1.2-13]
 </param>
	<param name="willRetainFlag">
 指定遗嘱消息（Will Message）在发布时是否会被保留。
 如果willFlag标志被设置为false，willRetainFlag标志也必须设置为false [MQTT-3.1.2-13]。
 如果willFlag标志被设置为true时，如果willRetainFlag被设置为false，则服务端必须将遗嘱消息当做非保留消息发布 [MQTT-3.1.2-14]。
 如果willRetainFlag被设置为true，则服务端必须将遗嘱消息当做保留消息发布 [MQTT-3.1.2-15]。
 </param>
	<param name="userFlag">
 3.1.2.8 用户名标志。
 如果用户名标志（User Name Flag）被设置为false，有效载荷中不能包含用户名字段 [MQTT-3.1.2-16]。如果用户名标志被设置为true，有效载荷中必须包含用户名字段 [MQTT-3.1.2-17]。
 </param>
	<param name="pwdFlag">
 密码标志。
 如果密码标志（Password Flag）被设置为false，有效载荷中不能包含密码字段 [MQTT-3.1.2-18]。如果密码标志被设置为true，有效载荷中必须包含密码字段 [MQTT-3.1.2-19]。
 </param>
	<returns>连接标志</returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.getKeepAlive(System.Int16)">
	<summary>
 将保活计时时间转位字节数组
 </summary>
	<param name="keepAlivetimer">保活计时时间（秒）</param>
	<returns>字节数组的保活计时时间</returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.getRemainingSize(System.Byte[],System.UInt32@)">
	<summary>
 从接收到的数据包里面获取固定包头的剩余长度或其它变长字节整数
 </summary>
	<param name="dataBuff">完整的数据包</param>
	<param name="pos">需要计算的开始位置。默认从索引位置1开始计算。并返回下一个索引位</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.getBitVal(System.Byte,System.Byte,System.Byte)">
	<summary>
 获取整数的某几位的值（连续索引）
 </summary>
	<param name="value"></param>
	<param name="endBit">从右边开始计数的最后一个bit</param>
	<param name="startBit">从右开始计数的开始bit置</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttClient.packetAnalysis(System.Byte[],System.Int32)">
	<summary>
 接收到的数据包解析
 </summary>
	<param name="dataBuff">数据字节缓冲区</param>
	<param name="buffLen">收到的数据缓冲区随机大小</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttSubscriptionOptions.#ctor(Mqtt客户端.MqttClient.MqttQoS)">
	<summary>
 最大服务质量
 </summary>
	<param name="qos"></param>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttSubscriptionOptions.QoS">
	<summary>
 最大服务质量
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttSubscriptionOptions.getNoLocal">
	<summary>
 获取不会发布给订阅发布主题的发布者本身
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttSubscriptionOptions.setNoLocal(System.Boolean)">
	<summary>
 设置不会发布给订阅发布主题的发布者本身
 </summary>
	<param name="noLocal">
 值为true，表示应用消息不能被转发给发布此消息的客户标识符。共享订阅时把非本地选项设为true将造成协议错误（Protocol Error）
 </param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttSubscriptionOptions.setRetainAsPublished(System.Boolean)">
	<summary>
 设置发布保留标志
 </summary>
	<param name="val">
 值为true，表示向此订阅转发应用消息时保持消息被发布时设置的保留（RETAIN）标志。值为false，表示向此订阅转发应用消息时把保留标志设置为0。当订阅建立之后，发送保留消息时保留标志设置为1。
 </param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttSubscriptionOptions.getRetainAsPublished">
	<summary>
 获取发布保留标志位
 值为1，表示向此订阅转发应用消息时保持消息被发布时设置的保留（RETAIN）标志。值为0，表示向此订阅转发应用消息时把保留标志设置为0。当订阅建立之后，发送保留消息时保留标志设置为1。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttSubscriptionOptions.RetainHandling">
	<summary>
 保留操作（Retain Handling）选项。此选项指示当订阅建立时，是否发送保留消息。此选项不影响之后的任何保留消息的发送。
 如果没有匹配主题过滤器的保留消息，则此选项所有值的行为都一样。值可以设置为：
 0 = 订阅建立时发送保留消
 1 = 订阅建立时，若该订阅当前不存在则发送保留消息
 2 = 订阅建立时不要发送保留消息
 保留操作的值设置为3将造成协议错误（Protocol Error）。
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Mqtt客户端.MqttSubscriptionOptions">
	<summary>
 MQTT订阅选项
 </summary>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.My.Resources.Resources.ResourceManager">
	<summary>
  返回此类使用的缓存的 ResourceManager 实例。
</summary>
</member><member name="P:Mqtt客户端.My.Resources.Resources.Culture">
	<summary>
  使用此强类型资源类，为所有资源查找
  重写当前线程的 CurrentUICulture 属性。
</summary>
</member><member name="P:Mqtt客户端.My.Resources.Resources.down">
	<summary>
  查找 System.Drawing.Bitmap 类型的本地化资源。
</summary>
</member><member name="P:Mqtt客户端.My.Resources.Resources.down1">
	<summary>
  查找 System.Drawing.Bitmap 类型的本地化资源。
</summary>
</member><member name="P:Mqtt客户端.My.Resources.Resources.up">
	<summary>
  查找 System.Drawing.Bitmap 类型的本地化资源。
</summary>
</member><member name="P:Mqtt客户端.My.Resources.Resources.up1">
	<summary>
  查找 System.Drawing.Bitmap 类型的本地化资源。
</summary>
</member><member name="T:Mqtt客户端.My.Resources.Resources">
	<summary>
  一个强类型的资源类，用于查找本地化的字符串等。
</summary>
</member><member name="F:Mqtt客户端.MqttMessage.mPayload">
	<summary> 有效载荷</summary>
</member><member name="F:Mqtt客户端.MqttMessage.mQoS">
	<summary>消息的服务质量</summary>
</member><member name="F:Mqtt客户端.MqttMessage.mDUP">
	<summary>重复传送标志</summary>
</member><member name="F:Mqtt客户端.MqttMessage.mMessageId">
	<summary>消息id</summary>
</member><member name="F:Mqtt客户端.MqttMessage.mProperies">
	<summary>消息属性</summary>
</member><member name="M:Mqtt客户端.MqttMessage.getPayload">
	<summary>
 获取有效载荷
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttMessage.getPayloadString">
	<summary>
 获取有效载荷字符串
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttMessage.clearPayload">
	<summary>
 清除有效负载，将其重置为空。
 </summary>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttMessage.setPayload(System.Byte[])">
	<summary>
 设置有效载荷
 </summary>
	<param name="payload">UTF-8编码字节数组</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttMessage.setPayload(System.String)">
	<summary>
 设置有效载荷
 </summary>
	<param name="payload"></param>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttMessage.retained">
	<summary>
 是否会被保留
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttMessage.QoS">
	<summary>
 消息服务质量(仅0-2之间)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttMessage.messageId">
	<summary>
 消息id
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttMessage.duplicate">
	<summary>
 重传标志
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttMessage.setProperies(System.UInt32,System.String,Mqtt客户端.MqttProperties.MqttPayloadFormat,System.UInt16,System.UInt32)">
	<summary>
 设置消息属性
 </summary>
	<param name="msgExpiryInterval">以秒为单位的消息过期间隔（Message Expiry Interval）</param>
	<param name="contentType">消息内容类型（消息内容描述字符串）</param>
	<param name="isPayloadUTF8">载荷是否位UTF-8编码</param>
	<param name="topicAlia">主题别名</param>
	<param name="subscriptionIdentifier">
 订阅标识符(遗属消息不支持订阅标识符)。
 取值范围从1到268,435,455。订阅标识符的值为0将造成协议错误。如果某条发布消息匹配了多个订阅，则将包含多个订阅标识符。这种情况下他们的顺序并不重要。
 </param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttMessage.setProperies(Mqtt客户端.MqttProperties)">
	<summary>
 设置消息属性
 </summary>
	<param name="properies"></param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttMessage.setWillProperies(System.UInt32,System.UInt32,System.String,Mqtt客户端.MqttProperties.MqttPayloadFormat,System.UInt16)">
	<summary>
 设置最后遗属消息属性
 </summary>
	<param name="willDelayInterval">以秒为单位的遗嘱延时间隔（Will Delay Interval）。</param>
	<param name="willExpiryInterval">以秒为单位的消息过期间隔（Message Expiry Interval）</param>
	<param name="contentType">消息内容类型（消息内容描述字符串）</param>
	<param name="isPayloadUTF8">载荷是否位UTF-8编码</param>
	<param name="topicAlia">主题别名</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttMessage.getMsgProperies(System.Boolean)">
	<summary>
 获取消息属性数据
 </summary>
	<param name="isWillMsg">最后遗属消息</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Mqtt客户端.MqttMessage">
	<summary>
 消息实体
 </summary>
	<remarks></remarks>
</member><member name="F:Mqtt客户端.MqttConnectOptions.KEEP_ALIVE_INTERVAL_DEFAULT">
	<summary>如果未指定保持活动状态的默认时间间隔（秒）</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.CONNECTION_TIMEOUT_DEFAULT">
	<summary>如果未指定连接超时，则默认连接超时（秒）</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.MAX_INFLIGHT_DEFAULT">
	<summary>默认最大飞行时间（如果未指定）</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.CLEAN_SESSION_DEFAULT">
	<summary>默认的清除会话设置（如果未指定）</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.MQTT_VERSION_DEFAULT">
	<summary> 默认的MqttVersion首先是3.1.1，如果失败则返回3.1</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.Version.MQTT_VERSION_3_1">
	<summary> MQTT v3.1版本</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.Version.MQTT_VERSION_3_1_1">
	<summary> MQTT v3.1.1版本</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.Version.MQTT_VERSION_5_0">
	<summary> MQTT v5.0版本</summary>
</member><member name="T:Mqtt客户端.MqttConnectOptions.Version">
	<summary>
 MQTT版本枚举
 </summary>
	<remarks></remarks>
</member><member name="F:Mqtt客户端.MqttConnectOptions.mKeepAliveInterval">
	<summary>心跳时间间隔</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.mConnectionTimeout">
	<summary>连接超时</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.mMaxInflight">
	<summary>最大飞行时间(秒) </summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.mUserName">
	<summary>用户名</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.mPassword">
	<summary>密码</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.mWillTopic">
	<summary>遗属话题</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.mWillMessage">
	<summary>遗属消息</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.mCleanSession">
	<summary>清除会话 </summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.mMqttVersion">
	<summary> 协议版本</summary>
</member><member name="F:Mqtt客户端.MqttConnectOptions.mProperies">
	<summary> 连接属性(适用于MQTT v5.0及以上版本)</summary>
</member><member name="P:Mqtt客户端.MqttConnectOptions.keepAliveInterval">
	<summary>
 心跳检测间隔时间（秒）
 </summary>
	<value>间隔时间（秒）</value>
	<returns>间隔时间（秒）</returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttConnectOptions.connectionTimeout">
	<summary>
 连接超时时间间隔（秒）
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttConnectOptions.maxInflight">
	<summary>
 最大飞行时间间隔
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttConnectOptions.userName">
	<summary>
 用户名
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttConnectOptions.password">
	<summary>
 密码
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttConnectOptions.cleanSession">
	<summary>
 清除会话
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttConnectOptions.mqttVersion">
	<summary>
 mqtt协议版本
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttConnectOptions.setMqttVersion(Mqtt客户端.MqttConnectOptions.Version)">
	<summary>
 设置MQTT协议版本
 </summary>
	<param name="ver"></param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttConnectOptions.getMqttVersion">
	<summary>
 获取MQTT协议版本
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttConnectOptions.setWill(System.String,System.String,System.Byte,System.Boolean)">
	<summary>
 设置“最后遗嘱”（LWT）的连接。输入如果此客户端意外失去与服务器的连接，服务器将使用提供的详细信息向其自身发布消息。
 </summary>
	<param name="topic">要发布到的主题</param>
	<param name="payload">消息的字符串有效负载</param>
	<param name="QoS">在（0、1或2）处发布消息的服务质量</param>
	<param name="retained">是否应该保留消息</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttConnectOptions.setWill(System.String,System.String,System.Byte,System.Boolean,System.UInt32,System.UInt32,System.String,Mqtt客户端.MqttProperties.MqttPayloadFormat,System.UInt16)">
	<summary>
 设置“最后遗嘱”（LWT）的连接。输入如果此客户端意外失去与服务器的连接，服务器将使用提供的详细信息向其自身发布消息。
 （适用于MQTT 5.0及以上版本）
 </summary>
	<param name="topic">要发布到的主题</param>
	<param name="payload">消息的字符串有效负载</param>
	<param name="QoS">在（0、1或2）处发布消息的服务质量</param>
	<param name="retained">是否应该保留消息</param>
	<param name="willDelayInterval">以秒为单位的遗嘱延时间隔（Will Delay Interval）。</param>
	<param name="willExpiryInterval">&gt;以秒为单位的消息过期间隔（Message Expiry Interval）</param>
	<param name="contentType">消息内容类型（消息内容描述字符串）</param>
	<param name="isPayloadUTF8">载荷是否位UTF-8编码</param>
	<param name="topicAlia">主题别名</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttConnectOptions.setWill(System.String,System.Byte[],System.Byte,System.Boolean)">
	<summary>
 设置“最后遗嘱”（LWT）的连接。输入如果此客户端意外失去与服务器的连接，服务器将使用提供的详细信息向其自身发布消息。
 </summary>
	<param name="topic">要发布到的主题</param>
	<param name="payload">消息的字节有效负载</param>
	<param name="QoS">在（0、1或2）处发布消息的服务质量</param>
	<param name="retained">是否应该保留消息</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttConnectOptions.setWill(System.String,Mqtt客户端.MqttMessage,System.Byte,System.Boolean)">
	<summary>
 根据提供的参数设置遗嘱信息。
 </summary>
	<param name="topic">要发布到的主题</param>
	<param name="msg">遗属消息主体</param>
	<param name="QoS">在（0、1或2）处发布消息的服务质量。</param>
	<param name="retained">是否应该保留消息</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttConnectOptions.setWill(System.String,Mqtt客户端.MqttMessage)">
	<summary>
 根据提供的参数设置遗嘱信息。
 </summary>
	<param name="topic">要发布到的主题</param>
	<param name="msg">遗属消息主体（包含消息的字节有效负载，QoS,retained）</param>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttConnectOptions.WillTopic">
	<summary>
 获取最后遗属主题字符串
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttConnectOptions.WillMessage">
	<summary>
 获取最后遗属消息
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttConnectOptions.setProperies(System.UInt32,System.UInt16,System.UInt32,System.UInt16)">
	<summary>
 设置连接属性
 </summary>
	<param name="sessionExpiryInterval">
 会话过期间隔（Session Expiry Interval）
 如果会话过期间隔（Session Expiry Interval）值未指定，则使用0。如果设置为0或者未指定，会话将在网络连接（Network Connection）关闭时结束。 
 如果会话过期间隔（Session Expiry Interval）为0xFFFFFFFF (UINT_MAX)，则会话永不过期。
 </param>
	<param name="receiveMax">
 接收最大值（Receive Maximum）
 客户端使用此值限制客户端愿意同时处理的QoS等级1和QoS等级2的发布消息最大数量。没有机制可以限制服务端试图发送的QoS为0的发布消息。
 接收最大值只将被应用在当前网络连接。如果没有设置最大接收值，将使用默认值65535。
 </param>
	<param name="maxPacketSize">
 最大报文长度
 如果没有设置最大报文长度（Maximum Packet Size），则按照协议由固定报头中的剩余长度可编码最大值和协议报头对数据包的大小做限制。
 包含多个最大报文长度（Maximum Packet Size）或者最大报文长度（Maximum Packet Size）值为0将造成协议错误。
 </param>
	<param name="topicAliasMax">
 主题别名最大值
 包含多个主题别名最大值（Topic Alias Maximum）将造成协议错误（Protocol Error）。没有设置主题别名最大值属性的情况下，主题别名最大值默认为零。
 此值指示了客户端能够接收的来自服务端的主题别名（Topic Alias）最大数量。
 客户端使用此值来限制本次连接可以拥有的主题别名的数量。
 服务端在一个PUBLISH报文中发送的主题别名不能超过客户端设置的主题别名最大值（Topic Alias Maximum）。
 值为零表示本次连接客户端不接受任何主题别名（Topic Alias）。如果主题别名最大值（Topic Alias）没有设置，或者设置为零，则服务端不能向此客户端发送任何主题别名（Topic Alias）。
 </param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttConnectOptions.getProperies">
	<summary>
 获取连接属性
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Mqtt客户端.MqttConnectOptions">
	<summary>
 连接选项
 </summary>
	<remarks></remarks>
</member><member name="F:Mqtt客户端.MqttProperties.MqttPayloadFormat.UNSPECIFIED_BYTES">
	<summary>未指定的字节，等同于不发送载荷格式指示</summary>
</member><member name="F:Mqtt客户端.MqttProperties.MqttPayloadFormat.UTF_8">
	<summary>UTF-8编码的字符数据</summary>
</member><member name="T:Mqtt客户端.MqttProperties.MqttPayloadFormat">
	<summary>
 载荷格式
 </summary>
	<remarks></remarks>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.PAYLODA_FORMAT_DESCRIPTION">
	<summary>载荷格式说明(字节)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.MESSAGE_EXPIRY_TIME">
	<summary>消息过期时间(四字节)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.CONTENT_TYPE">
	<summary>内容类型(UTF-8编码字符串)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.RESPOND_TOPICS">
	<summary>响应主题(UTF-8编码字符串)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.RELATED_DATA">
	<summary>相关数据(二进制数据)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.SUBSCRIPTION_IDENTIFIER">
	<summary>订阅标识符(变长字节整数)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.SESSINO_EXPIRY_INTERVAL">
	<summary>会话过期间隔(四字节整数)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.ASSIGNED_CLIENT_IDENTIFIER">
	<summary>分配客户标识符(UTF-8编码字符串)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.SERVICE_KEEP_ALVE">
	<summary>服务端保活时间(双字节整数)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.AUTHENTICATION_METHOD">
	<summary>认证方法(UTF-8编码字符串)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.AUTHENTICATION_DATA">
	<summary>认证数据(二进制数据)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.REQUEST_QUESTION_INFO">
	<summary>请求问题信息(字节)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.WILL_DELAY_INTERVAL">
	<summary>遗嘱延时间隔(四字节整数)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.REQUEST_RESPONSE_INFO">
	<summary>请求响应信息(字节)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.REQUEST_INFO">
	<summary>请求信息(UTF-8编码字符串)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.SERVICE_REFERENCE">
	<summary>服务端参考(UTF-8编码字符串)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.REASON_STRING">
	<summary>原因字符串(UTF-8编码字符串)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.MAX_RECEIVE">
	<summary>接收最大数量(双字节整数)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.MAX_TOPIC_ALIAS_SIZE">
	<summary>主题别名最大长度(双字节整数)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.TOPIC_ALIAS">
	<summary>主题别名(双字节整数)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.MAX_QOS">
	<summary>最大QoS(字节)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.PRESERVE_ATTRIBUTE_AVAILABLE">
	<summary>保留属性可用性(字节)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.USER_ATTRIBUTE">
	<summary>用户属性(UTF-8字符串对)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.MAX_PACKET_SIZE">
	<summary>最大报文长度(四字节整数)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.WILDCARD_SUBSCRIBE_AVAILABLE">
	<summary>通配符订阅可用性(字节)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.SUBSCRIBE_IDENTIFIER_AVAILABLE">
	<summary>订阅标识符可用性(字节)</summary>
</member><member name="F:Mqtt客户端.MqttProperties.AttributeIdentifier.SHARED_SUBSCRIBE_AVAILABLE">
	<summary>共享订阅可用性(字节)</summary>
</member><member name="T:Mqtt客户端.MqttProperties.AttributeIdentifier">
	<summary>
 属性标识符
 </summary>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.SessionExpiryInterval">
	<summary>
 会话过期时间间隔
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setSessionExpiryInterval(System.UInt32)">
	<summary>
 设置会话过期时间间隔
 </summary>
	<param name="interval">时间间隔（秒）</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getSessionExpiryInterval">
	<summary>
 获取会话过期时间间隔属性数据包（含属性标识符）
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.MaxReceive">
	<summary>
 最大接收值
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setMaxReceive(System.UInt16)">
	<summary>
 设置最大接收值
 客户端使用此值限制客户端愿意同时处理的QoS等级1和QoS等级2的发布消息最大数量。没有机制可以限制服务端试图发送的QoS为0的发布消息。
 </summary>
	<param name="maxVal"></param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getMaxReceive">
	<summary>
 获取最大接收值属性数据包（含属性标识符）
 客户端使用此值限制客户端愿意同时处理的QoS等级1和QoS等级2的发布消息最大数量。没有机制可以限制服务端试图发送的QoS为0的发布消息。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.MaximumPacketSize">
	<summary>
 最大报文大小
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setMaximumPacketSize(System.UInt32)">
	<summary>
 设置最大报文大小
 如果没有设置最大报文长度（Maximum Packet Size），则按照协议由固定报头中的剩余长度可编码最大值和协议报头对数据包的大小做限制。
 </summary>
	<param name="size"></param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getMaximumPacketSize">
	<summary>
 获取最大报文大小属性数据包（含属性标识符）
 如果没有设置最大报文长度（Maximum Packet Size），则按照协议由固定报头中的剩余长度可编码最大值和协议报头对数据包的大小做限制。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.TopicAliasMax">
	<summary>
 主题别名最大值
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setTopicAliasMax(System.UInt16)">
	<summary>
 设置主题别名最大值
 包含多个主题别名最大值（Topic Alias Maximum）将造成协议错误（Protocol Error）。没有设置主题别名最大值属性的情况下，主题别名最大值默认为零。
 </summary>
	<param name="size"></param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getTopicAliasMax">
	<summary>
 获取主题别名最大长度属性数据包（含属性标识符）
 包含多个主题别名最大值（Topic Alias Maximum）将造成协议错误（Protocol Error）。没有设置主题别名最大值属性的情况下，主题别名最大值默认为零。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.TopicAlia">
	<summary>
 主题别名
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setTopicAlia(System.UInt16)">
	<summary>
 设置主题别名
 一个整数，用来代替主题名对主题进行识别。主题别名可以减小PUBLISH报文的长度，这对某个网络连接中发送的很长且反复使用的主题名来说很有用。
 </summary>
	<param name="alia"></param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getTopicAlia">
	<summary>
 获取主题别名
 一个整数，用来代替主题名对主题进行识别。主题别名可以减小PUBLISH报文的长度，这对某个网络连接中发送的很长且反复使用的主题名来说很有用。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.RequestResponseInfo">
	<summary>
 请求响应信息
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setRequestResponseInfo(System.Boolean)">
	<summary>
 设置请求响应信息属性
 包含多个请求响应信息（Request Response Information），或者请求响应信息（Request Response Information）的值既不为0也不为1会造成协议错误（Protocol Error）。
 如果没有请求响应信息（Request Response Information），则请求响应默认值为0。
 </summary>
	<param name="responseInfo">响应信息</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getRequestResponseInfo">
	<summary>
 获取请求响应信息属性（含属性标识符）
 包含多个请求响应信息（Request Response Information），或者请求响应信息（Request Response Information）的值既不为0也不为1会造成协议错误（Protocol Error）。
 如果没有请求响应信息（Request Response Information），则请求响应默认值为0。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.RequestProblemInfo">
	<summary>
 请求问题信息
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setRequestProblemInfo(System.Boolean)">
	<summary>
 设置请求问题信息属性
 包含多个请求问题信息（Request Problem Information），或者请求问题信息（Request Problem Information）的值既不为0也不为1会造成协议错误（Protocol Error）。
 如果没有请求问题信息（Request Problem Information），则请求问题默认值为1。
 </summary>
	<param name="problemInfo">问题信息</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getRequestProblemInfo">
	<summary>
 获取请求问题信息属性（含属性标识符）
 包含多个请求问题信息（Request Problem Information），或者请求问题信息（Request Problem Information）的值既不为0也不为1会造成协议错误（Protocol Error）。
 如果没有请求问题信息（Request Problem Information），则请求问题默认值为1。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.UserProperty">
	<summary>
 用户属性
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setUserProperty(System.String)">
	<summary>
 设置用户属性
 用户属性（User Property）可以出现多次，表示多个名字/值对。相同的名字可以出现多次。
 </summary>
	<param name="attribute">属性名称</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getUserProperty">
	<summary>
 获取用户属性（含属性标识符）
 用户属性（User Property）可以出现多次，表示多个名字/值对。相同的名字可以出现多次。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getAuthenticationMethod">
	<summary>
 获取扩展认证的认证方法
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setAuthentication(System.String,System.Byte[])">
	<summary>
 设置认证
 包含了扩展认证的认证方法（Authentication Method）名称。包含多个认证方法将造成协议错误（协议错误）。
 如果没有认证方法，则不进行扩展验证。
 没有认证方法却包含了认证数据（Authentication Data），或者包含多个认证数据（Authentication Data）将造成协议错误（Protocol Error）。 
 </summary>
	<param name="method">方法名称</param>
	<param name="data">认证数据</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getAuthentication">
	<summary>
 获取认证属性（含属性标识符）
 包含了扩展认证的认证方法（Authentication Method）名称。包含多个认证方法将造成协议错误（协议错误）。
 如果没有认证方法，则不进行扩展验证。
 没有认证方法却包含了认证数据（Authentication Data），或者包含多个认证数据（Authentication Data）将造成协议错误（Protocol Error）。 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.WillDelayInterval">
	<summary>
 遗嘱延时间隔（秒）
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setWillDelayInterval(System.UInt32)">
	<summary>
 设置遗嘱延时间隔
 </summary>
	<param name="interval">时间间隔（秒）</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getWillDelayInterval">
	<summary>
 获取遗嘱延时间隔
 含多个遗嘱延时间隔将造成协议错误（Protocol Error）。如果没有设置遗嘱延时间隔，遗嘱延时间隔默认值将为0，即不用延时发布遗嘱消息（Will Message）。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.PayloadFormat">
	<summary>
 载荷格式标识
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setPayloadFormat(Mqtt客户端.MqttProperties.MqttPayloadFormat)">
	<summary>
 设置载荷格式标识
 </summary>
	<param name="format">载荷格式</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getPayloadFormat">
	<summary>
 获取载荷格式标识
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.MessageExpiryInterval">
	<summary>
 消息过期时间间隔
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setMessageExpiryInterval(System.UInt32)">
	<summary>
 设置消息过期时间间隔
 </summary>
	<param name="interval">时间间隔(秒)</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getMessageExpiryInterval">
	<summary>
 获取消息过期时间间隔
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.ContentType">
	<summary>
 内容类型
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setContentType(System.String)">
	<summary>
 内容类型
 </summary>
	<param name="type"></param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getContentType">
	<summary>
 获取内容类型（含标识符数据，内容长度数据，内容数据）
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.ResponseTopic">
	<summary>
 响应主题
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setResponseTopic(System.String)">
	<summary>
 设置响应主题
 </summary>
	<param name="topic">主题名称</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getResponseTopic">
	<summary>
 获取响应主题
 用来表示响应消息的主题名（Topic Name）。包含多个响应主题（Response Topic）将造成协议错误。响应主题的存在将遗嘱消息（Will Message）标识为一个请求报文。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.CorrelationData">
	<summary>
 相关数据
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setCorrelationData(System.Byte[])">
	<summary>
 设置相关数据
 </summary>
	<param name="data">数据</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getCorrelationData">
	<summary>
 获取相关数据
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.MaximumQoS">
	<summary>
 最大服务质量
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setMaximumQoS(Mqtt客户端.MqttClient.MqttQoS)">
	<summary>
 设置最大服务质量
 </summary>
	<param name="qos">服务质量</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getMaximumQoS">
	<summary>
 获取最大服务质量
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.RetainAvailable">
	<summary>
 保留可用
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setRetainAvailable(System.Boolean)">
	<summary>
 设置保留可用
 用来声明服务端是否支持保留消息。值为0表示不支持保留消息，为1表示支持保留消息。如果没有设置保留可用字段，表示支持保留消息。
 包含多个保留可用字段或保留可用字段值不为0也不为1将造成协议错误（Protocol Error）。
 </summary>
	<param name="retain">保留</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getRetainAvailable">
	<summary>
 获取保留可用
 用来声明服务端是否支持保留消息。值为0表示不支持保留消息，为1表示支持保留消息。如果没有设置保留可用字段，表示支持保留消息。
 包含多个保留可用字段或保留可用字段值不为0也不为1将造成协议错误（Protocol Error）。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.tAssignedClientIdentifier">
	<summary>
 分配客户标识符
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setAssignedClientIdentifier(System.String)">
	<summary>
 设置分配客户标识符
 </summary>
	<param name="clientIdentifier">客户标识符</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getAssignedClientIdentifier">
	<summary>
 获取分配客户标识符
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.ReasonString">
	<summary>
 原因字符
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setReasonString(System.String)">
	<summary>
 设置原因字符
 </summary>
	<param name="reason"></param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getReasonString">
	<summary>
 获取原因字符
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.WildcardSubscriptionAvailable">
	<summary>
 通配符订阅可用
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setWildcardSubscriptionAvailable(System.Boolean)">
	<summary>
 设置通配符订阅可用
 </summary>
	<param name="available">可用</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getWildcardSubscriptionAvailable">
	<summary>
 获取通配符订阅可用
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.SubscriptionIdentifierAvailable">
	<summary>
 订阅可用
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setSubscriptionIdentifierAvailable(System.Boolean)">
	<summary>
 设置订阅可用
 </summary>
	<param name="available"></param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getSubscriptionIdentifierAvailable">
	<summary>
 获取订阅可用
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.SharedSubscriptionAvailable">
	<summary>
 共享订阅可用
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setSharedSubscriptionAvailable(System.Boolean)">
	<summary>
 设置共享订阅可用
 </summary>
	<param name="available"></param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getSharedSubscriptionAvailable">
	<summary>
 获取共享订阅可用
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.ServerKeepAlive">
	<summary>
 服务端保持连接时间
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setServerKeepAlive(System.UInt16)">
	<summary>
 设置服务端保持连接时间
 如果服务端发送了服务端保持连接（Server Keep Alive）属性，客户端必须使用此值代替其在CONNECT报文中发送的保持连接时间值 [MQTT-3.2.2-21]。
 如果服务端没有发送服务端保持连接属性，服务端必须使用客户端在CONNECT报文中设置的保持连接时间值 [MQTT-3.2.2-22]。
 包含多个服务端保持连接属性将造成协议错误（Protocol Error）。
 </summary>
	<param name="keepAlive">保持连接的时间(秒)</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getServerKeepAlive">
	<summary>
 获取服务端保持连接时间
 如果服务端发送了服务端保持连接（Server Keep Alive）属性，客户端必须使用此值代替其在CONNECT报文中发送的保持连接时间值 [MQTT-3.2.2-21]。
 如果服务端没有发送服务端保持连接属性，服务端必须使用客户端在CONNECT报文中设置的保持连接时间值 [MQTT-3.2.2-22]。
 包含多个服务端保持连接属性将造成协议错误（Protocol Error）。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.ResponseInfo">
	<summary>
 响应信息
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setResponseInfo(System.String)">
	<summary>
 设置响应信息
 </summary>
	<param name="info"></param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getResponseInfo">
	<summary>
 获取响应信息
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.ServerReference">
	<summary>
 服务参考
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setServerReference(System.String)">
	<summary>
 设置服务参考
 可以被客户端用来标识其他可用的服务端。包含多个服务端参考（Server Reference）将造成协议错误（Protocol Error）。
 </summary>
	<param name="reference">参考信息</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getServerReference">
	<summary>
 获取服务参考
 可以被客户端用来标识其他可用的服务端。包含多个服务端参考（Server Reference）将造成协议错误（Protocol Error）。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Mqtt客户端.MqttProperties.SubscriptionIdentifier">
	<summary>
 订阅标识符
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setSubscriptionIdentifier(System.UInt32)">
	<summary>
 设置订阅标识符
 订阅标识符取值范围从1到268,435,455。订阅标识符的值为0将造成协议错误。
 如果某条发布消息匹配了多个订阅，则将包含多个订阅标识符。这种情况下他们的顺序并不重要。
 </summary>
	<param name="identifier"></param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.getSubscriptionIdentifier">
	<summary>
 获取订阅标识符
 订阅标识符取值范围从1到268,435,455。订阅标识符的值为0将造成协议错误。
 如果某条发布消息匹配了多个订阅，则将包含多个订阅标识符。这种情况下他们的顺序并不重要。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.setProperies(System.UInt32,System.String,Mqtt客户端.MqttProperties.MqttPayloadFormat,System.UInt16)">
	<summary>
 设置消息属性
 </summary>
	<param name="msgExpiryInterval">以秒为单位的消息过期间隔（Message Expiry Interval）</param>
	<param name="contentType">消息内容类型（消息内容描述字符串）</param>
	<param name="isPayloadUTF8">载荷是否位UTF-8编码</param>
	<param name="topicAlia">主题别名</param>
	<remarks></remarks>
</member><member name="M:Mqtt客户端.MqttProperties.VariableLengthByte(System.UInt32)">
	<summary>
 整数转边长字节数组
 </summary>
	<param name="variableInteger"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Mqtt客户端.MqttProperties">
	<summary>
 属性
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>